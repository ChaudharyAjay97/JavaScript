1: What are variables in JavaScript? How do you declare a variable using var, let, and const?
 
=>var
Oldest way to declare variables .
Function-scoped (not block-scoped).
Can be redeclared and updated.
var x = 10;
var x = 20;  // redeclaration allowed

=> let
Introduced in ES6 
Block-scoped (only exists within { }).
Can be updated, but cannot be redeclared in the same scope.
let y = 30;
y = 40;  // allowed
// let y = 50;

=>const
Block-scoped.
Must be initialized at declaration.
Cannot be reassigned (but if it’s an object/array, its contents can change).

2. What is the difference between undefined and null in JavaScript?
 =>undefined: This indicates that a variable has been declared but has not yet been assigned a value. It is also returned in cases where:
=>null:This represents the intentional absence of any object value. It is a primitive value that must be explicitly assigned to a variable to indicate that it currently holds no meaningful object reference.



3: What are the different types of operators in JavaScript? Explain with examples?
   1: Arithmetic Operators
| Operator | Meaning             | Example          | Result  |
| -------- | ------------------- | ---------------- | ------- |
| `+`      | Addition            | `5 + 3`          | `8`     |
| `-`      | Subtraction         | `5 - 3`          | `2`     |
| `*`      | Multiplication      | `5 * 3`          | `15`    |
| `/`      | Division            | `6 / 2`          | `3`     |
| `%`      | Modulus (remainder) | `5 % 2`          | `1`     |
| `**`     | Exponentiation      | `2 ** 3`         | `8`     |
| `++`     | Increment           | `let x = 1; x++` | `x = 2` |
| `--`     | Decrement           | `let x = 1; x--` | `x = 0` |

  2:Assignment Operators
| Operator | Meaning             | Example  | Same as     |
| -------- | ------------------- | -------- | ----------- |
| `=`      | Assign              | `x = 10` | —           |
| `+=`     | Add and assign      | `x += 5` | `x = x + 5` |
| `-=`     | Subtract and assign | `x -= 3` | `x = x - 3` |
| `*=`     | Multiply and assign | `x *= 2` | `x = x * 2` |
| `/=`     | Divide and assign   | `x /= 4` | `x = x / 4` |
| `%=`     | Modulus and assign  | `x %= 3` | `x = x % 3` |

 3:Comparison Operators
  | Operator | Meaning                  | Example     | Result  |
| -------- | ------------------------ | ----------- | ------- |
| `==`     | Equal (value)            | `5 == "5"`  | `true`  |
| `===`    | Equal (value + type)     | `5 === "5"` | `false` |
| `!=`     | Not equal (value)        | `5 != "5"`  | `false` |
| `!==`    | Not equal (value + type) | `5 !== "5"` | `true`  |
| `>`      | Greater than             | `5 > 3`     | `true`  |
| `<`      | Less than                | `5 < 3`     | `false` |
| `>=`     | Greater or equal         | `5 >= 5`    | `true`  |
| `<=`     | Less or equal            | `5 <= 4`    | `false` |

4:Logical Operators
| Operator | Meaning         | Example         | Result        |        |   |         |        |
| -------- | --------------- | --------------- | ------------- | ------ | - | ------- | ------ |
| `&&`     | AND (both true) | `true && false` | `false`       |        |   |         |        |
| \`       |                 | \`              | OR (any true) | \`true |   | false\` | `true` |
| `!`      | NOT (reverse)   | `!true`         | `false`       |        |   |         |        |


Ex:
let a = 5, b = 10;

console.log(a + b);   // 15 (arithmetic)
console.log(a == 5);  // true (comparison)
console.log(a < b && b > 0); // true (logical AND)
a += 3;               // a = a + 3 → a = 8 (assignment)
console.log(a);       // 8


5:Describe how switch statements work in JavaScript. When should you use a
switch statement instead of if-else?
 A switch statement compares a value (called the expression) against multiple possible cases.
 It checks each case from top to bottom until it finds a match.
 If it finds a match, it runs the corresponding block of code.
 If no match is found, it runs the default block (if provided).

=> a simple JavaScript program to check if a number is positive, negative, or zero using if-else:

let num = prompt("Enter a num");  
num = Number(num);

if (num> 0) {
  console.log("The number is positive.");
} else if (num < 0) {
  console.log("The number is negative.");
} else {
  console.log("The number is zero.");
}

=> JavaScript program using a switch statement to display the day of the week based on the
user input (e.g., 1 for Monday, 2 for Tuesday, etc.)
  
  let day = prompt("Enter a number (1-7) for the day of the week:");
day = Number(day); 

switch(day) {
  case 1:
    console.log("Monday");
    break;
  case 2:
    console.log("Tuesday");
    break;
  case 3:
    console.log("Wednesday");
    break;
  case 4:
    console.log("Thursday");
    break;
  case 5:
    console.log("Friday");
    break;
  case 6:
    console.log("Saturday");
    break;
  case 7:
    console.log("Sunday");
    break;
  default:
    console.log("Invalid input! Please enter a number between 1 and 7.");
}


6: JavaScript provides several types of loops to execute a block of code repeatedly. The primary types are for, while, and do-while.

=>for loop: The for loop is used when the number of iterations is known or can be easily determined. It consists of three parts: initialization, condition, and increment/decrement.

=>while loop: The while loop executes a block of code as long as a specified condition remains true. The condition is checked before each iteration. 

=>do-while loop: The do-while loop is similar to the while loop, but it guarantees that the code block will execute at least once, as the condition is checked after the first iteration. 

7:  What is the difference between a while loop and a do-while loop
  => While Loop: Condition Check: The condition is evaluated at the beginning of each loop iteration. 
   Execution: If the condition is true, the loop body is executed. If the condition is false, the loop terminates         without executing the body. Use Case: Suitable when you want to ensure the loop body executes only if the condition is initially true. 

=>Do-While Loop: Condition Check: The condition is evaluated at the end of each loop iteration. 
Execution: The loop body is executed at least once, and then the condition is checked. If the condition is true, the loop continues. If the condition is false, the loop terminates. 
Use Case: Useful when you need to ensure the loop body runs at least once, regardless of the initial condition. For example, in scenarios involving user input validation, you might want to prompt the user for input at least once before checking if the input is valid. 

8: Explain the setTimeout() and setInterval() functions in JavaScript. Howare they used for timing events?
 =>setTimeout() and setInterval() are used for scheduling the execution of code after a specified delay
    
=>setTimeout()
	Purpose: Executes a function once after a specified time delay. 
	Syntax: setTimeout(function, delay, arg1, arg2, ...); 

	function: The function to be executed. 
	delay: The time (in milliseconds) to wait before executing the function. 
	arg1, arg2, ...: (Optional) Arguments to be passed to the function. 

=>setInterval()
	Purpose: Repeatedly executes a function at a fixed time interval. 
	Syntax: setInterval(function, delay, arg1, arg2, ...); 
	function: The function to be executed repeatedly. 
	delay: The time (in milliseconds) between each execution of the function. 
	arg1, arg2, ...: (Optional) Arguments to be passed to the function. 

9:What are JavaScript events? Explain the role of event listeners.
   JavaScript events are actions or occurrences that happen in the browser, typically in response to user       interactions or browser actions. These events signal that something significant has taken place, allowing JavaScript code to react and create dynamic and interactive web pages. Examples of events include a user clicking a button, hovering over an element, pressing a key, submitting a form, or a web page finishing its loading process. Event listeners are functions in JavaScript that "listen" for specific events to occur on a given HTML element or the document/window object. When the specified event is triggered, the event listener executes a predefined callback function, known as an event handler, to respond to that event.

10:How does the addEventListener() method work in JavaScript? Provide an example.
 The addEventListener() method in JavaScript is used to attach an event handler to a specified element without     overriding existing event handlers. It listens for a specific event (e.g., "click", "keydown", "submit") on that element and executes a provided function when the event occurs. 

event: A string representing the type of event to listen for (e.g., "click", "mouseover", "keydown").
function:The function to be executed when the specified event occurs. This function can be defined separately or as an anonymous function directly within the addEventListener() call. An Event object is passed as the first argument to this function, providing details about the event

